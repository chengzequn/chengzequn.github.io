/*!
 * Simple Jekyll Search
 * Copyright 2015-2020 Christian Fei
 * Licensed under MIT (https://github.com/christian-fei/Simple-Jekyll-Search/blob/master/LICENSE)
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof module === 'object' && module.exports) {
    module.exports = factory();
  } else {
    root.SimpleJekyllSearch = factory();
  }
}(typeof window !== 'undefined' ? window : this, function() {
  'use strict';

  function SimpleJekyllSearch(options) {
    var defaults = {
      searchInput: null,
      resultsContainer: null,
      json: [],
      searchResultTemplate: '<li><a href="{url}">{title}</a></li>',
      noResultsText: 'No results found',
      limit: 10,
      fuzzy: false,
      exclude: [],
      searchInputFormatter: function(query) {
        return query.toLowerCase();
      },
      sortMiddleware: function(results, query) {
        return results;
      },
      highlightMatches: false,
      normalizeWS: false,
      ignoreLocation: false,
      debounceTime: 100
    };

    this.options = extend({}, defaults, options);
    this.searchResults = [];
    this.queue = [];
    this.isSearching = false;
    this.worker = undefined;
    this.timeout = undefined;

    this.searchInput = getElement(this.options.searchInput);
    this.resultsContainer = getElement(this.options.resultsContainer);
    this.json = this.options.json;
    this.searchResultTemplate = this.options.searchResultTemplate;
    this.noResultsText = this.options.noResultsText;
    this.limit = this.options.limit;
    this.fuzzy = this.options.fuzzy;
    this.exclude = this.options.exclude;
    this.searchInputFormatter = this.options.searchInputFormatter;
    this.sortMiddleware = this.options.sortMiddleware;
    this.highlightMatches = this.options.highlightMatches;
    this.normalizeWS = this.options.normalizeWS;
    this.ignoreLocation = this.options.ignoreLocation;
    this.debounceTime = this.options.debounceTime;

    this._init();
  }

  SimpleJekyllSearch.prototype._init = function() {
    this._registerInput();
    this._loadData();
  };

  SimpleJekyllSearch.prototype._loadData = function() {
    if (typeof this.json === 'string') {
      var xhr = new XMLHttpRequest();
      xhr.overrideMimeType('application/json');
      xhr.open('GET', this.json, true);
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4 && xhr.status === 200) {
          try {
            this._parseJSON(xhr.responseText);
          } catch (error) {
            throw new Error('Failed to parse JSON!');
          }
        }
      }.bind(this);
      xhr.send(null);
    } else {
      this._parseJSON(this.json);
    }
  };

  SimpleJekyllSearch.prototype._parseJSON = function(json) {
    var parsed;
    try {
      parsed = typeof json === 'string' ? JSON.parse(json) : json;
    } catch (error) {
      throw new Error('Not valid JSON!');
    }

    this.searchResults = parsed.map(function(item) {
      if (this._isValidResult(item)) {
        return {
          title: item.title,
          url: this.ignoreLocation ? this._stripLocation(item.url) : item.url,
          content: item.content,
          excerpt: item.excerpt,
          categories: item.categories,
          tags: item.tags
        };
      }
    }, this).filter(Boolean);

    this._triggerRendered();
  };

  SimpleJekyllSearch.prototype._stripLocation = function(url) {
    if (!url) return url;
    var a = document.createElement('a');
    a.href = url;
    var path = a.pathname + a.search + a.hash;
    return path.charAt(0) === '/' ? path.substr(1) : path;
  };

  SimpleJekyllSearch.prototype._registerInput = function() {
    if (this.searchInput) {
      var handleInput = function(event) {
        clearTimeout(this.timeout);
        this.timeout = setTimeout(function() {
          var query = event.target.value.trim();
          this._search(query);
        }.bind(this), this.debounceTime);
      }.bind(this);

      this.searchInput.addEventListener('input', handleInput);
      this.searchInput.addEventListener('keyup', handleInput);
    }
  };

  SimpleJekyllSearch.prototype._search = function(query) {
    if (this.isSearching) {
      this.queue.push(query);
      return;
    }

    this.isSearching = true;
    var results = [];

    if (query !== '') {
      var formattedQuery = this.searchInputFormatter(query);
      results = this.searchResults.filter(function(item) {
        return this._matches(item, formattedQuery, this.fuzzy);
      }, this);
    }

    results = this.sortMiddleware(results, query);
    this._render(results, query);
    this.isSearching = false;

    if (this.queue.length > 0) {
      var nextQuery = this.queue.shift();
      this._search(nextQuery);
    }
  };

  SimpleJekyllSearch.prototype._matches = function(item, query, fuzzy) {
    var searchProps = [item.title];
    if (item.content) searchProps.push(item.content);
    if (item.excerpt) searchProps.push(item.excerpt);
    if (item.categories && Array.isArray(item.categories)) {
      searchProps = searchProps.concat(item.categories);
    }
    if (item.tags && Array.isArray(item.tags)) {
      searchProps = searchProps.concat(item.tags);
    }

    for (var i = 0; i < searchProps.length; i++) {
      var prop = searchProps[i];
      if (!prop) continue;
      if (fuzzy) {
        if (this._fuzzyMatch(prop.toLowerCase(), query)) {
          return true;
        }
      } else {
        if (prop.toLowerCase().indexOf(query) !== -1) {
          return true;
        }
      }
    }

    return false;
  };

  SimpleJekyllSearch.prototype._fuzzyMatch = function(string, query) {
    var stringIndex = 0;
    for (var i = 0; i < query.length; i++) {
      var char = query[i];
      stringIndex = string.indexOf(char, stringIndex);
      if (stringIndex === -1) {
        return false;
      }
      stringIndex++;
    }
    return true;
  };

  SimpleJekyllSearch.prototype._render = function(results, query) {
    var html = '';
    var hasResults = results.length > 0;

    if (hasResults) {
      if (results.length > this.limit) {
        results = results.slice(0, this.limit);
      }

      html = results.map(function(item) {
        return this._formatResult(item, query);
      }, this).join('');
    } else {
      html = this.noResultsText.replace(/\{query\}/g, query);
    }

    this.resultsContainer.innerHTML = html;
    this._triggerRendered();
  };

  SimpleJekyllSearch.prototype._formatResult = function(item, query) {
    var template = this.searchResultTemplate;
    for (var key in item) {
      var value = item[key];
      if (typeof value === 'object') {
        value = JSON.stringify(value);
      }
      var regex = new RegExp('\{' + key + '\}', 'g');
      template = template.replace(regex, value);
    }
    return template;
  };

  SimpleJekyllSearch.prototype._isValidResult = function(item) {
    for (var i = 0; i < this.exclude.length; i++) {
      if (item.url && item.url.indexOf(this.exclude[i]) !== -1) {
        return false;
      }
    }
    return true;
  };

  SimpleJekyllSearch.prototype._triggerRendered = function() {
    var event = new CustomEvent('simpleJekyllSearch:rendered', {
      bubbles: true
    });
    document.dispatchEvent(event);
  };

  function getElement(el) {
    if (typeof el === 'string') {
      return document.getElementById(el);
    }
    return el;
  }

  function extend(out) {
    out = out || {};
    for (var i = 1; i < arguments.length; i++) {
      if (!arguments[i]) continue;
      for (var key in arguments[i]) {
        if (arguments[i].hasOwnProperty(key)) {
          out[key] = arguments[i][key];
        }
      }
    }
    return out;
  }

  return SimpleJekyllSearch;
}));